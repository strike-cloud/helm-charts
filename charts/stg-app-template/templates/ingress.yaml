{{- if and (eq .Values.type "app") (.Values.ingress.enabled) }}
{{- $ingressRules := .Values.ingress.rules | default (list (dict "name" "main" "port" (index .Values.service.ports 0).name "path" "/")) }}
{{- range $ruleIndex, $rule := $ingressRules }}
{{- $portConfig := index $.Values.service.ports 0 }}
{{- range $.Values.service.ports }}
  {{- if eq .name $rule.port }}
    {{- $portConfig = . }}
  {{- end }}
{{- end }}
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: {{ $.Values.appName }}{{ if ne $rule.name "main" }}-{{ $rule.name }}{{ end }}-group
  namespace: {{ $.Values.namespace }}
  annotations:
    kubernetes.io/ingress.class: alb
    alb.ingress.kubernetes.io/scheme: {{ $.Values.ingress.scheme}}
    alb.ingress.kubernetes.io/target-type: {{ $.Values.ingress.target}}
    alb.ingress.kubernetes.io/security-groups: {{ $.Values.ingress.sg }}
    alb.ingress.kubernetes.io/healthcheck-path: {{ $.Values.healthcheck.path }}
    alb.ingress.kubernetes.io/group.name: {{ $.Values.ingress.group }}
    alb.ingress.kubernetes.io/listen-ports: '[{"HTTPS":443}]'
    alb.ingress.kubernetes.io/certificate-arn: {{ $.Values.ingress.certificate }}
    alb.ingress.kubernetes.io/load-balancer-attributes: deletion_protection.enabled=true
    alb.ingress.kubernetes.io/load-balancer-attributes: routing.http.preserve_host_header.enabled=true
    alb.ingress.kubernetes.io/load-balancer-attributes: routing.http.xff_header_processing.mode=preserve
    alb.ingress.kubernetes.io/actions.{{ $.Values.appName }}{{ if ne $rule.name "main" }}-{{ $rule.name }}{{ end }}: '{ "Type": "forward", "ForwardConfig": { "TargetGroups": [ { "Weight": 100, "ServiceName": "{{ $.Values.appName }}", "ServicePort": "{{ $portConfig.port }}" } ] } }'
    alb.ingress.kubernetes.io/tags: Owner=santiago.hernandez@strike.sh,Environment={{ $.Values.envShort }},Monitoring=Datadog,ContainsUserData=true,UserDataStored=false,Description=InternalALBGroup,Repo=helm-apps
    external-dns.alpha.kubernetes.io/hostname: {{ $rule.host | default (if ne $.Values.ingress.domain "preview.strike.sh" (printf "%s.%s.%s" $.Values.appName $.Values.envShort $.Values.ingress.domain) (printf "%s.%s" $.Values.appName $.Values.ingress.domain)) }}
  labels:
    app: {{ $.Values.appName }}
spec:
  rules:
  - host: {{ $rule.host | default (if ne $.Values.ingress.domain "preview.strike.sh" (printf "%s.%s.%s" $.Values.appName $.Values.envShort $.Values.ingress.domain) (printf "%s.%s" $.Values.appName $.Values.ingress.domain)) }}
    http:
      paths:
        - path: {{ $rule.path | default "/" }}
          pathType: Prefix
          backend:
            service:
              name: {{ $.Values.appName }}
              port:
                number: {{ $portConfig.port }}
{{- end }}
{{- end }}